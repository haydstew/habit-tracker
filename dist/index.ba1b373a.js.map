{"mappings":"ACAA,eAAe,IACb,IAAM,EAAY,OAAO,sCACzB,GAAI,CAAC,EAAW,CACd,MAAM,iDACN,MACF,CAEA,IAAM,EAAY,CAChB,UAAW,IAAI,WAAW,IAC1B,GAAI,CAAE,KAAM,eAAgB,EAC5B,KAAM,CACJ,GAAI,IAAI,cAAc,MAAM,CAAC,GAC7B,KAAM,EACN,YAAa,MACf,EACA,iBAAkB,CAAC,CAAE,KAAM,aAAc,IAAK,EAAG,EAAE,CACnD,uBAAwB,CAAE,iBAAkB,UAAW,EACvD,QAAS,IACT,YAAa,QACf,EAEA,GAAI,CACF,IAAM,EAAa,MAAM,UAAU,WAAW,CAAC,MAAM,CAAC,CAAE,UAAA,CAAU,GAE5D,EAAW,KACf,OAAO,YAAY,IAAI,IAAI,WAAW,EAAW,KAAK,IAGxD,aAAa,OAAO,CAClB,eACA,KAAK,SAAS,CAAC,CACb,GAAI,EACJ,MAAO,CACT,IAEF,aAAa,OAAO,CAAC,QAAS,KAAK,SAAS,CAAC,IAE7C,MAAM,qCACR,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,iCAAkC,GAChD,MAAM,4CACR,CACF,CAaA,eAAe,IACb,IAAM,EAAoB,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,iBAC1D,GAAI,CAAC,EAAmB,CACtB,MAAM,mDACN,MACF,CAEA,IAAM,EAAY,CAChB,UAAW,IAAI,WAAW,IAC1B,iBAAkB,CAChB,CACE,GAAI,AAtBZ,SAA+B,CAAS,EACtC,IAAM,EAAU,IAAI,MAAM,CAAC,AAAC,CAAA,EAAK,EAAU,MAAM,CAAG,CAAA,EAAM,GACpD,EAAU,AAAA,CAAA,EAAY,CAAA,EAAS,OAAO,CAAC,KAAM,KAAK,OAAO,CAAC,KAAM,KAChE,EAAU,OAAO,IAAI,CAAC,GACtB,EAAc,IAAI,WAAW,EAAQ,MAAM,EACjD,IAAK,IAAI,EAAI,EAAG,EAAI,EAAQ,MAAM,CAAE,EAAE,EACpC,CAAW,CAAC,EAAE,CAAG,EAAQ,UAAU,CAAC,GAEtC,OAAO,CACT,EAakC,EAAkB,EAAE,EAC9C,KAAM,YACR,EACD,CACD,iBAAkB,WAClB,QAAS,GACX,EAEA,GAAI,CACF,IAAM,EAAY,MAAM,UAAU,WAAW,CAAC,GAAG,CAAC,CAAE,UAAA,CAAU,GAE9D,aAAa,OAAO,CAAC,oBAAqB,KAAK,SAAS,CAAC,IAEzD,MAAM,8BACN,OAAO,QAAQ,CAAC,IAAI,CAAG,aACzB,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,yBAA0B,GACxC,MAAM,oCACR,CACF,CAEA,SACG,cAAc,CAAC,qBACf,gBAAgB,CAAC,QAAS,GAC7B,SACG,cAAc,CAAC,UACf,gBAAgB,CAAC,QAAS","sources":["<anon>","assets/js/signIn.js"],"sourcesContent":["var $f9208ba5285f3f38$exports = {};\nasync function $f9208ba5285f3f38$var$registerBiometric() {\n    const userEmail = prompt(\"Enter your email for registration:\");\n    if (!userEmail) {\n        alert(\"Email is required for biometric registration.\");\n        return;\n    }\n    const publicKey = {\n        challenge: new Uint8Array(32),\n        rp: {\n            name: \"Habit Tracker\"\n        },\n        user: {\n            id: new TextEncoder().encode(userEmail),\n            name: userEmail,\n            displayName: \"User\"\n        },\n        pubKeyCredParams: [\n            {\n                type: \"public-key\",\n                alg: -7\n            }\n        ],\n        authenticatorSelection: {\n            userVerification: \"required\"\n        },\n        timeout: 60000,\n        attestation: \"direct\"\n    };\n    try {\n        const credential = await navigator.credentials.create({\n            publicKey: publicKey\n        });\n        const idBase64 = btoa(String.fromCharCode(...new Uint8Array(credential.rawId)));\n        localStorage.setItem(\"biometricKey\", JSON.stringify({\n            id: idBase64,\n            email: userEmail\n        }));\n        localStorage.setItem(\"email\", JSON.stringify(userEmail));\n        alert(\"Biometric registration successful!\");\n    } catch (error) {\n        console.error(\"Biometric registration failed:\", error);\n        alert(\"Biometric registration failed. Try again.\");\n    }\n}\nfunction $f9208ba5285f3f38$var$base64urlToUint8Array(base64url) {\n    const padding = \"=\".repeat((4 - base64url.length % 4) % 4);\n    const base64 = (base64url + padding).replace(/-/g, \"+\").replace(/_/g, \"/\");\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n    for(let i = 0; i < rawData.length; ++i)outputArray[i] = rawData.charCodeAt(i);\n    return outputArray;\n}\nasync function $f9208ba5285f3f38$var$authenticateBiometric() {\n    const storedCredentials = JSON.parse(localStorage.getItem(\"biometricKey\"));\n    if (!storedCredentials) {\n        alert(\"No biometric data found. Please register first.\");\n        return;\n    }\n    const publicKey = {\n        challenge: new Uint8Array(32),\n        allowCredentials: [\n            {\n                id: $f9208ba5285f3f38$var$base64urlToUint8Array(storedCredentials.id),\n                type: \"public-key\"\n            }\n        ],\n        userVerification: \"required\",\n        timeout: 60000\n    };\n    try {\n        const assertion = await navigator.credentials.get({\n            publicKey: publicKey\n        });\n        localStorage.setItem(\"authenticatedUser\", JSON.stringify(assertion));\n        alert(\"Authentication successful!\");\n        window.location.href = \"habits.html\";\n    } catch (error) {\n        console.error(\"Authentication failed:\", error);\n        alert(\"Authentication failed. Try again.\");\n    }\n}\ndocument.getElementById(\"registerBiometric\").addEventListener(\"click\", $f9208ba5285f3f38$var$registerBiometric);\ndocument.getElementById(\"signIn\").addEventListener(\"click\", $f9208ba5285f3f38$var$authenticateBiometric);\n\n\n//# sourceMappingURL=index.ba1b373a.js.map\n","async function registerBiometric() {\r\n  const userEmail = prompt(\"Enter your email for registration:\");\r\n  if (!userEmail) {\r\n    alert(\"Email is required for biometric registration.\");\r\n    return;\r\n  }\r\n\r\n  const publicKey = {\r\n    challenge: new Uint8Array(32),\r\n    rp: { name: \"Habit Tracker\" },\r\n    user: {\r\n      id: new TextEncoder().encode(userEmail),\r\n      name: userEmail,\r\n      displayName: \"User\",\r\n    },\r\n    pubKeyCredParams: [{ type: \"public-key\", alg: -7 }],\r\n    authenticatorSelection: { userVerification: \"required\" },\r\n    timeout: 60000,\r\n    attestation: \"direct\",\r\n  };\r\n\r\n  try {\r\n    const credential = await navigator.credentials.create({ publicKey });\r\n\r\n    const idBase64 = btoa(\r\n      String.fromCharCode(...new Uint8Array(credential.rawId))\r\n    );\r\n\r\n    localStorage.setItem(\r\n      \"biometricKey\",\r\n      JSON.stringify({\r\n        id: idBase64,\r\n        email: userEmail,\r\n      })\r\n    );\r\n    localStorage.setItem(\"email\", JSON.stringify(userEmail));\r\n\r\n    alert(\"Biometric registration successful!\");\r\n  } catch (error) {\r\n    console.error(\"Biometric registration failed:\", error);\r\n    alert(\"Biometric registration failed. Try again.\");\r\n  }\r\n}\r\n\r\nfunction base64urlToUint8Array(base64url) {\r\n  const padding = \"=\".repeat((4 - (base64url.length % 4)) % 4);\r\n  const base64 = (base64url + padding).replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n  const rawData = window.atob(base64);\r\n  const outputArray = new Uint8Array(rawData.length);\r\n  for (let i = 0; i < rawData.length; ++i) {\r\n    outputArray[i] = rawData.charCodeAt(i);\r\n  }\r\n  return outputArray;\r\n}\r\n\r\nasync function authenticateBiometric() {\r\n  const storedCredentials = JSON.parse(localStorage.getItem(\"biometricKey\"));\r\n  if (!storedCredentials) {\r\n    alert(\"No biometric data found. Please register first.\");\r\n    return;\r\n  }\r\n\r\n  const publicKey = {\r\n    challenge: new Uint8Array(32),\r\n    allowCredentials: [\r\n      {\r\n        id: base64urlToUint8Array(storedCredentials.id),\r\n        type: \"public-key\",\r\n      },\r\n    ],\r\n    userVerification: \"required\",\r\n    timeout: 60000,\r\n  };\r\n\r\n  try {\r\n    const assertion = await navigator.credentials.get({ publicKey });\r\n\r\n    localStorage.setItem(\"authenticatedUser\", JSON.stringify(assertion));\r\n\r\n    alert(\"Authentication successful!\");\r\n    window.location.href = \"habits.html\";\r\n  } catch (error) {\r\n    console.error(\"Authentication failed:\", error);\r\n    alert(\"Authentication failed. Try again.\");\r\n  }\r\n}\r\n\r\ndocument\r\n  .getElementById(\"registerBiometric\")\r\n  .addEventListener(\"click\", registerBiometric);\r\ndocument\r\n  .getElementById(\"signIn\")\r\n  .addEventListener(\"click\", authenticateBiometric);\r\n"],"names":["$f9208ba5285f3f38$var$registerBiometric","userEmail","prompt","alert","publicKey","challenge","Uint8Array","rp","name","user","id","TextEncoder","encode","displayName","pubKeyCredParams","type","alg","authenticatorSelection","userVerification","timeout","attestation","credential","navigator","credentials","create","idBase64","btoa","String","fromCharCode","rawId","localStorage","setItem","JSON","stringify","email","error","console","$f9208ba5285f3f38$var$authenticateBiometric","storedCredentials","parse","getItem","allowCredentials","$f9208ba5285f3f38$var$base64urlToUint8Array","base64url","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","i","charCodeAt","assertion","get","location","href","document","getElementById","addEventListener"],"version":3,"file":"index.ba1b373a.js.map"}