{"mappings":"A,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,I,E,E,S,E,E,SCMA,MAAM,EAAa,SAAS,aAAa,CAAC,qBACpC,EAAY,SAAS,cAAc,CAAC,aACpC,EAAe,SAAS,cAAc,CAAC,gBACvC,EAAiB,SAAS,cAAc,CAAC,cAE/C,IAAI,EAAgB,CAAA,EAkCpB,eAAe,IAEb,IAAM,EAAY,SAAS,cAAc,CAAC,SAAS,KAAK,CAAC,IAAI,GACvD,EAAW,SAAS,cAAc,CAAC,YAAY,KAAK,CAAC,IAAI,GAE/D,GAAI,AAAc,KAAd,GAAoB,AAAa,KAAb,EAAiB,CACvC,MAAM,oDACN,MACF,CAEA,GAAI,CACF,MAAM,AAAA,CAAA,EAAA,EAAA,8BAA6B,AAA7B,EAA+B,EAAA,IAAG,CAAG,EAAW,GAEtD,IAAM,EAAY,CAChB,UAAW,IAAI,WAAW,IAC1B,GAAI,CAAE,KAAM,eAAgB,EAC5B,KAAM,CACJ,GAAI,IAAI,cAAc,MAAM,CAAC,GAC7B,KAAM,EACN,YAAa,MACf,EACA,iBAAkB,CAAC,CAAE,KAAM,aAAc,IAAK,EAAG,EAAE,CACnD,uBAAwB,CAAE,iBAAkB,UAAW,EACvD,QAAS,IACT,YAAa,QACf,EAEM,EAAa,MAAM,UAAU,WAAW,CAAC,MAAM,CAAC,CAAE,UAAA,CAAU,GAE5D,EAAW,KACf,OAAO,YAAY,IAAI,IAAI,WAAW,EAAW,KAAK,IAGxD,aAAa,OAAO,CAClB,eACA,KAAK,SAAS,CAAC,CACb,GAAI,EACJ,MAAO,CACT,IAGF,MACE,uEAEJ,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,uBAAwB,GACtC,MAAM,wCACR,CACF,CAEA,eAAe,IACb,IAAM,EAAY,SAAS,cAAc,CAAC,SAAS,KAAK,CAAC,IAAI,GACvD,EAAW,SAAS,cAAc,CAAC,YAAY,KAAK,CAAC,IAAI,GAE/D,GAAI,AAAc,KAAd,GAAoB,AAAa,KAAb,EAAiB,CACvC,MAAM,oDACN,MACF,CAEA,IAAM,EAAoB,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,iBAC1D,GAAI,CAAC,EAAmB,CACtB,MAAM,mDACN,MACF,CAEA,GAAI,CACF,IAAM,EAAY,CAChB,UAAW,IAAI,WAAW,IAC1B,iBAAkB,CAChB,CACE,GAAI,AAjFd,SAA+B,CAAS,EACtC,IAAM,EAAU,IAAI,MAAM,CAAC,AAAC,CAAA,EAAK,EAAU,MAAM,CAAG,CAAA,EAAM,GACpD,EAAU,AAAA,CAAA,EAAY,CAAA,EAAS,OAAO,CAAC,KAAM,KAAK,OAAO,CAAC,KAAM,KAChE,EAAU,OAAO,IAAI,CAAC,GACtB,EAAc,IAAI,WAAW,EAAQ,MAAM,EACjD,IAAK,IAAI,EAAI,EAAG,EAAI,EAAQ,MAAM,CAAE,EAAE,EACpC,CAAW,CAAC,EAAE,CAAG,EAAQ,UAAU,CAAC,GAEtC,OAAO,CACT,EAwEoC,EAAkB,EAAE,EAC9C,KAAM,YACR,EACD,CACD,iBAAkB,WAClB,QAAS,GACX,CAEA,OAAM,UAAU,WAAW,CAAC,GAAG,CAAC,CAAE,UAAA,CAAU,GAE5C,MAAM,AAAA,CAAA,EAAA,EAAA,0BAAyB,AAAzB,EAA2B,EAAA,IAAG,CAAG,EAAkB,KAAK,CAAE,GAEhE,aAAa,OAAO,CAAC,oBAAqB,KAAK,SAAS,CAAC,CAAA,IACzD,OAAO,QAAQ,CAAC,IAAI,CAAG,aACzB,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,yBAA0B,GACxC,MAAM,2CACR,CACF,CAEA,EAAa,gBAAgB,CAAC,QAAS,KACjC,EACF,IAEA,GAEJ,GAEA,EAAW,gBAAgB,CAAC,QAlI5B,SAAS,EAAW,CAAK,EACvB,EAAM,cAAc,GAEpB,CAAA,EAAgB,CAAC,CAAjB,GAGE,EAAU,WAAW,CAAG,WACxB,EAAa,WAAW,CAAG,WAC3B,EAAe,SAAS,CACtB,mFAEF,EAAU,WAAW,CAAG,UACxB,EAAa,WAAW,CAAG,UAC3B,EAAe,SAAS,CACtB,kFAIJ,AADsB,SAAS,aAAa,CAAC,qBAC/B,gBAAgB,CAAC,QAAS,EAC1C","sources":["<anon>","assets/js/signIn.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $47Mwn = parcelRequire(\"47Mwn\");\n\nvar $6AR8M = parcelRequire(\"6AR8M\");\nconst $f9208ba5285f3f38$var$toggleLink = document.querySelector(\".toggle-form-link\");\nconst $f9208ba5285f3f38$var$formTitle = document.getElementById(\"formTitle\");\nconst $f9208ba5285f3f38$var$actionButton = document.getElementById(\"actionButton\");\nconst $f9208ba5285f3f38$var$toggleLinkText = document.getElementById(\"toggleLink\");\nlet $f9208ba5285f3f38$var$isRegistering = false;\nfunction $f9208ba5285f3f38$var$toggleForm(event) {\n    event.preventDefault();\n    $f9208ba5285f3f38$var$isRegistering = !$f9208ba5285f3f38$var$isRegistering;\n    if ($f9208ba5285f3f38$var$isRegistering) {\n        $f9208ba5285f3f38$var$formTitle.textContent = \"Register\";\n        $f9208ba5285f3f38$var$actionButton.textContent = \"Register\";\n        $f9208ba5285f3f38$var$toggleLinkText.innerHTML = 'Already have an account? <a href=\"#\" class=\"toggle-form-link\">Sign in here</a>';\n    } else {\n        $f9208ba5285f3f38$var$formTitle.textContent = \"Sign In\";\n        $f9208ba5285f3f38$var$actionButton.textContent = \"Sign In\";\n        $f9208ba5285f3f38$var$toggleLinkText.innerHTML = 'Don\\'t have an account? <a href=\"#\" class=\"toggle-form-link\">Register here</a>';\n    }\n    const newToggleLink = document.querySelector(\".toggle-form-link\");\n    newToggleLink.addEventListener(\"click\", $f9208ba5285f3f38$var$toggleForm);\n}\nfunction $f9208ba5285f3f38$var$base64urlToUint8Array(base64url) {\n    const padding = \"=\".repeat((4 - base64url.length % 4) % 4);\n    const base64 = (base64url + padding).replace(/-/g, \"+\").replace(/_/g, \"/\");\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n    for(let i = 0; i < rawData.length; ++i)outputArray[i] = rawData.charCodeAt(i);\n    return outputArray;\n}\nasync function $f9208ba5285f3f38$var$registerBiometric() {\n    // Get values inside the function, when the button is clicked\n    const userEmail = document.getElementById(\"email\").value.trim();\n    const password = document.getElementById(\"password\").value.trim();\n    if (userEmail === \"\" || password === \"\") {\n        alert(\"Please enter a valid email address and password.\");\n        return;\n    }\n    try {\n        await (0, $6AR8M.createUserWithEmailAndPassword)((0, $47Mwn.auth), userEmail, password);\n        const publicKey = {\n            challenge: new Uint8Array(32),\n            rp: {\n                name: \"Habit Tracker\"\n            },\n            user: {\n                id: new TextEncoder().encode(userEmail),\n                name: userEmail,\n                displayName: \"User\"\n            },\n            pubKeyCredParams: [\n                {\n                    type: \"public-key\",\n                    alg: -7\n                }\n            ],\n            authenticatorSelection: {\n                userVerification: \"required\"\n            },\n            timeout: 60000,\n            attestation: \"direct\"\n        };\n        const credential = await navigator.credentials.create({\n            publicKey: publicKey\n        });\n        const idBase64 = btoa(String.fromCharCode(...new Uint8Array(credential.rawId)));\n        localStorage.setItem(\"biometricKey\", JSON.stringify({\n            id: idBase64,\n            email: userEmail\n        }));\n        alert(\"You have registered successfuly! You can now sign into your account.\");\n    } catch (error) {\n        console.error(\"Registration failed:\", error);\n        alert(\"Error during registration. Try again.\");\n    }\n}\nasync function $f9208ba5285f3f38$var$authenticateBiometric() {\n    const userEmail = document.getElementById(\"email\").value.trim();\n    const password = document.getElementById(\"password\").value.trim();\n    if (userEmail === \"\" || password === \"\") {\n        alert(\"Please enter a valid email address and password.\");\n        return;\n    }\n    const storedCredentials = JSON.parse(localStorage.getItem(\"biometricKey\"));\n    if (!storedCredentials) {\n        alert(\"No biometric data found. Please register first.\");\n        return;\n    }\n    try {\n        const publicKey = {\n            challenge: new Uint8Array(32),\n            allowCredentials: [\n                {\n                    id: $f9208ba5285f3f38$var$base64urlToUint8Array(storedCredentials.id),\n                    type: \"public-key\"\n                }\n            ],\n            userVerification: \"required\",\n            timeout: 60000\n        };\n        await navigator.credentials.get({\n            publicKey: publicKey\n        });\n        await (0, $6AR8M.signInWithEmailAndPassword)((0, $47Mwn.auth), storedCredentials.email, password);\n        localStorage.setItem(\"authenticatedUser\", JSON.stringify(true));\n        window.location.href = \"habits.html\";\n    } catch (error) {\n        console.error(\"Authentication failed:\", error);\n        alert(\"Authentication failed. Please try again.\");\n    }\n}\n$f9208ba5285f3f38$var$actionButton.addEventListener(\"click\", ()=>{\n    if ($f9208ba5285f3f38$var$isRegistering) $f9208ba5285f3f38$var$registerBiometric();\n    else $f9208ba5285f3f38$var$authenticateBiometric();\n});\n$f9208ba5285f3f38$var$toggleLink.addEventListener(\"click\", $f9208ba5285f3f38$var$toggleForm);\n\n\n//# sourceMappingURL=index.82ca20f0.js.map\n","import { auth } from \"./firebase.js\";\nimport {\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n} from \"firebase/auth\";\n\nconst toggleLink = document.querySelector(\".toggle-form-link\");\nconst formTitle = document.getElementById(\"formTitle\");\nconst actionButton = document.getElementById(\"actionButton\");\nconst toggleLinkText = document.getElementById(\"toggleLink\");\n\nlet isRegistering = false;\n\nfunction toggleForm(event) {\n  event.preventDefault();\n\n  isRegistering = !isRegistering;\n\n  if (isRegistering) {\n    formTitle.textContent = \"Register\";\n    actionButton.textContent = \"Register\";\n    toggleLinkText.innerHTML =\n      'Already have an account? <a href=\"#\" class=\"toggle-form-link\">Sign in here</a>';\n  } else {\n    formTitle.textContent = \"Sign In\";\n    actionButton.textContent = \"Sign In\";\n    toggleLinkText.innerHTML =\n      'Don\\'t have an account? <a href=\"#\" class=\"toggle-form-link\">Register here</a>';\n  }\n\n  const newToggleLink = document.querySelector(\".toggle-form-link\");\n  newToggleLink.addEventListener(\"click\", toggleForm);\n}\n\nfunction base64urlToUint8Array(base64url) {\n  const padding = \"=\".repeat((4 - (base64url.length % 4)) % 4);\n  const base64 = (base64url + padding).replace(/-/g, \"+\").replace(/_/g, \"/\");\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n\nasync function registerBiometric() {\n  // Get values inside the function, when the button is clicked\n  const userEmail = document.getElementById(\"email\").value.trim();\n  const password = document.getElementById(\"password\").value.trim();\n\n  if (userEmail === \"\" || password === \"\") {\n    alert(\"Please enter a valid email address and password.\");\n    return;\n  }\n\n  try {\n    await createUserWithEmailAndPassword(auth, userEmail, password);\n\n    const publicKey = {\n      challenge: new Uint8Array(32),\n      rp: { name: \"Habit Tracker\" },\n      user: {\n        id: new TextEncoder().encode(userEmail),\n        name: userEmail,\n        displayName: \"User\",\n      },\n      pubKeyCredParams: [{ type: \"public-key\", alg: -7 }],\n      authenticatorSelection: { userVerification: \"required\" },\n      timeout: 60000,\n      attestation: \"direct\",\n    };\n\n    const credential = await navigator.credentials.create({ publicKey });\n\n    const idBase64 = btoa(\n      String.fromCharCode(...new Uint8Array(credential.rawId))\n    );\n\n    localStorage.setItem(\n      \"biometricKey\",\n      JSON.stringify({\n        id: idBase64,\n        email: userEmail,\n      })\n    );\n\n    alert(\n      \"You have registered successfuly! You can now sign into your account.\"\n    );\n  } catch (error) {\n    console.error(\"Registration failed:\", error);\n    alert(\"Error during registration. Try again.\");\n  }\n}\n\nasync function authenticateBiometric() {\n  const userEmail = document.getElementById(\"email\").value.trim();\n  const password = document.getElementById(\"password\").value.trim();\n\n  if (userEmail === \"\" || password === \"\") {\n    alert(\"Please enter a valid email address and password.\");\n    return;\n  }\n\n  const storedCredentials = JSON.parse(localStorage.getItem(\"biometricKey\"));\n  if (!storedCredentials) {\n    alert(\"No biometric data found. Please register first.\");\n    return;\n  }\n\n  try {\n    const publicKey = {\n      challenge: new Uint8Array(32),\n      allowCredentials: [\n        {\n          id: base64urlToUint8Array(storedCredentials.id),\n          type: \"public-key\",\n        },\n      ],\n      userVerification: \"required\",\n      timeout: 60000,\n    };\n\n    await navigator.credentials.get({ publicKey });\n\n    await signInWithEmailAndPassword(auth, storedCredentials.email, password);\n\n    localStorage.setItem(\"authenticatedUser\", JSON.stringify(true));\n    window.location.href = \"habits.html\";\n  } catch (error) {\n    console.error(\"Authentication failed:\", error);\n    alert(\"Authentication failed. Please try again.\");\n  }\n}\n\nactionButton.addEventListener(\"click\", () => {\n  if (isRegistering) {\n    registerBiometric();\n  } else {\n    authenticateBiometric();\n  }\n});\n\ntoggleLink.addEventListener(\"click\", toggleForm);\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$47Mwn","$6AR8M","$f9208ba5285f3f38$var$toggleLink","document","querySelector","$f9208ba5285f3f38$var$formTitle","getElementById","$f9208ba5285f3f38$var$actionButton","$f9208ba5285f3f38$var$toggleLinkText","$f9208ba5285f3f38$var$isRegistering","$f9208ba5285f3f38$var$registerBiometric","userEmail","value","trim","password","alert","createUserWithEmailAndPassword","auth","publicKey","challenge","Uint8Array","rp","name","user","TextEncoder","encode","displayName","pubKeyCredParams","type","alg","authenticatorSelection","userVerification","timeout","attestation","credential","navigator","credentials","create","idBase64","btoa","String","fromCharCode","rawId","localStorage","setItem","JSON","stringify","email","error","console","$f9208ba5285f3f38$var$authenticateBiometric","storedCredentials","parse","getItem","allowCredentials","$f9208ba5285f3f38$var$base64urlToUint8Array","base64url","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","i","charCodeAt","get","signInWithEmailAndPassword","location","href","addEventListener","$f9208ba5285f3f38$var$toggleForm","event","preventDefault","textContent","innerHTML","newToggleLink"],"version":3,"file":"index.82ca20f0.js.map"}