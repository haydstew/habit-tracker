{"mappings":"A,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,W,C,I,I,E,I,A,G,E,E,W,C,E,a,C,C,GCEA,IAgBA,EAhBI,EAAU,IAAI,IAgBlB,EAfA,SAAkB,CAAO,CAAE,CAAQ,EACjC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,MAAM,CAAG,EAAG,GAAK,EAC5C,EAAQ,GAAG,CAAC,CAAQ,CAAC,EAAE,CAAE,CACvB,QAAS,EACT,KAAM,CAAQ,CAAC,EAAI,EAAE,AACvB,EAEJ,C,GCVA,AAAA,EAAA,SAAA,QAAA,CAA8C,IAAA,IAAoB,GAAA,YAAA,GAAA,EAAI,QAAQ,GAAG,KAAK,KAAK,CAAC,yG,I,E,C,EEA5F,EAAiB,IAAA,IAAoB,8CAAA,YAAA,GAAA,EAA+C,QAAQ,GDA5F,MAAM,EAAN,IAAA,IAAA,GAWA,eAAe,IACb,IAAM,EAAY,OAAO,sCACzB,GAAI,CAAC,EAAW,CACd,MAAM,iDACN,MACF,CAEA,IAAM,EAAY,CAChB,UAAW,IAAI,WAAW,IAC1B,GAAI,CAAE,KAAM,eAAgB,EAC5B,KAAM,CACJ,GAAI,IAAI,cAAc,MAAM,CAAC,GAC7B,KAAM,EACN,YAAa,MACf,EACA,iBAAkB,CAAC,CAAE,KAAM,aAAc,IAAK,EAAG,EAAE,CACnD,uBAAwB,CAAE,iBAAkB,UAAW,EACvD,QAAS,IACT,YAAa,QACf,EAEA,GAAI,CACF,IAAM,EAAa,MAAM,UAAU,WAAW,CAAC,MAAM,CAAC,CAAE,UAAA,CAAU,GAE5D,EAAW,KACf,OAAO,YAAY,IAAI,IAAI,WAAW,EAAW,KAAK,IAGxD,aAAa,OAAO,CAClB,eACA,KAAK,SAAS,CAAC,CACb,GAAI,EACJ,MAAO,CACT,IAEF,aAAa,OAAO,CAAC,QAAS,KAAK,SAAS,CAAC,IAE7C,MAAM,qCACR,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,iCAAkC,GAChD,MAAM,4CACR,CACF,CAaA,eAAe,IACb,IAAM,EAAoB,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,iBAC1D,GAAI,CAAC,EAAmB,CACtB,MAAM,mDACN,MACF,CAEA,IAAM,EAAY,CAChB,UAAW,IAAI,WAAW,IAC1B,iBAAkB,CAChB,CACE,GAAI,AAtBZ,SAA+B,CAAS,EACtC,IAAM,EAAU,IAAI,MAAM,CAAC,AAAC,CAAA,EAAK,EAAU,MAAM,CAAG,CAAA,EAAM,GACpD,EAAU,AAAA,CAAA,EAAY,CAAA,EAAS,OAAO,CAAC,KAAM,KAAK,OAAO,CAAC,KAAM,KAChE,EAAU,OAAO,IAAI,CAAC,GACtB,EAAc,IAAI,WAAW,EAAQ,MAAM,EACjD,IAAK,IAAI,EAAI,EAAG,EAAI,EAAQ,MAAM,CAAE,EAAE,EACpC,CAAW,CAAC,EAAE,CAAG,EAAQ,UAAU,CAAC,GAEtC,OAAO,CACT,EAakC,EAAkB,EAAE,EAC9C,KAAM,YACR,EACD,CACD,iBAAkB,WAClB,QAAS,GACX,EAEA,GAAI,CACF,IAAM,EAAY,MAAM,UAAU,WAAW,CAAC,GAAG,CAAC,CAAE,UAAA,CAAU,GAE9D,aAAa,OAAO,CAAC,oBAAqB,KAAK,SAAS,CAAC,IAEzD,MAAM,8BACN,OAAO,QAAQ,CAAC,IAAI,CAAG,aACzB,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,yBAA0B,GACxC,MAAM,oCACR,CACF,CA9FI,kBAAmB,WACrB,UAAU,aAAa,CACpB,QAAQ,CAAC,EAAG,IAAI,CAAE,CACjB,MAAO,iBACT,GACC,IAAI,CAAC,IAAM,QAAQ,GAAG,CAAC,uCAAwC,EAAG,IAAI,GACtE,KAAK,CAAC,AAAC,GAAQ,QAAQ,KAAK,CAAC,wBAAyB,IA0F3D,SACG,cAAc,CAAC,qBACf,gBAAgB,CAAC,QAAS,GAC7B,SACG,cAAc,CAAC,UACf,gBAAgB,CAAC,QAAS","sources":["<anon>","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-56a41dac815b4e1b.js","assets/js/signIn.js","node_modules/@parcel/runtime-js/lib/runtime-bf45dc67f7a674ad.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"27Lyk\", function(module, exports) {\n\n$parcel$export(module.exports, \"register\", () => $18c11f3350a906ea$export$6503ec6e8aabbaf, (v) => $18c11f3350a906ea$export$6503ec6e8aabbaf = v);\nvar $18c11f3350a906ea$export$6503ec6e8aabbaf;\nvar $18c11f3350a906ea$export$f7ad0328861e2f03;\n\"use strict\";\nvar $18c11f3350a906ea$var$mapping = new Map();\nfunction $18c11f3350a906ea$var$register(baseUrl, manifest) {\n    for(var i = 0; i < manifest.length - 1; i += 2)$18c11f3350a906ea$var$mapping.set(manifest[i], {\n        baseUrl: baseUrl,\n        path: manifest[i + 1]\n    });\n}\nfunction $18c11f3350a906ea$var$resolve(id) {\n    var resolved = $18c11f3350a906ea$var$mapping.get(id);\n    if (resolved == null) throw new Error('Could not resolve bundle with id ' + id);\n    return new URL(resolved.path, resolved.baseUrl).toString();\n}\n$18c11f3350a906ea$export$6503ec6e8aabbaf = $18c11f3350a906ea$var$register;\n$18c11f3350a906ea$export$f7ad0328861e2f03 = $18c11f3350a906ea$var$resolve;\n\n});\n\nvar $9fe83dc87f74260c$exports = {};\n\n(parcelRequire(\"27Lyk\")).register(new URL(\"\", import.meta.url).toString(), JSON.parse(\"[\\\"earC1\\\",\\\"index.84f4bc14.js\\\",\\\"b7sw5\\\",\\\"service-worker.57b936f8.js\\\"]\"));\n\nvar $e81386d1662d5268$exports = {};\n$e81386d1662d5268$exports = new URL(\"service-worker.57b936f8.js\", import.meta.url).toString();\n\n\nconst $f9208ba5285f3f38$var$sw = new URL($e81386d1662d5268$exports);\nif (\"serviceWorker\" in navigator) navigator.serviceWorker.register($f9208ba5285f3f38$var$sw.href, {\n    scope: \"/habit-tracker/\"\n}).then(()=>console.log(\"Service Worker Registered for scope:\", $f9208ba5285f3f38$var$sw.href)).catch((err)=>console.error(\"Service Worker Error:\", err));\nasync function $f9208ba5285f3f38$var$registerBiometric() {\n    const userEmail = prompt(\"Enter your email for registration:\");\n    if (!userEmail) {\n        alert(\"Email is required for biometric registration.\");\n        return;\n    }\n    const publicKey = {\n        challenge: new Uint8Array(32),\n        rp: {\n            name: \"Habit Tracker\"\n        },\n        user: {\n            id: new TextEncoder().encode(userEmail),\n            name: userEmail,\n            displayName: \"User\"\n        },\n        pubKeyCredParams: [\n            {\n                type: \"public-key\",\n                alg: -7\n            }\n        ],\n        authenticatorSelection: {\n            userVerification: \"required\"\n        },\n        timeout: 60000,\n        attestation: \"direct\"\n    };\n    try {\n        const credential = await navigator.credentials.create({\n            publicKey: publicKey\n        });\n        const idBase64 = btoa(String.fromCharCode(...new Uint8Array(credential.rawId)));\n        localStorage.setItem(\"biometricKey\", JSON.stringify({\n            id: idBase64,\n            email: userEmail\n        }));\n        localStorage.setItem(\"email\", JSON.stringify(userEmail));\n        alert(\"Biometric registration successful!\");\n    } catch (error) {\n        console.error(\"Biometric registration failed:\", error);\n        alert(\"Biometric registration failed. Try again.\");\n    }\n}\nfunction $f9208ba5285f3f38$var$base64urlToUint8Array(base64url) {\n    const padding = \"=\".repeat((4 - base64url.length % 4) % 4);\n    const base64 = (base64url + padding).replace(/-/g, \"+\").replace(/_/g, \"/\");\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n    for(let i = 0; i < rawData.length; ++i)outputArray[i] = rawData.charCodeAt(i);\n    return outputArray;\n}\nasync function $f9208ba5285f3f38$var$authenticateBiometric() {\n    const storedCredentials = JSON.parse(localStorage.getItem(\"biometricKey\"));\n    if (!storedCredentials) {\n        alert(\"No biometric data found. Please register first.\");\n        return;\n    }\n    const publicKey = {\n        challenge: new Uint8Array(32),\n        allowCredentials: [\n            {\n                id: $f9208ba5285f3f38$var$base64urlToUint8Array(storedCredentials.id),\n                type: \"public-key\"\n            }\n        ],\n        userVerification: \"required\",\n        timeout: 60000\n    };\n    try {\n        const assertion = await navigator.credentials.get({\n            publicKey: publicKey\n        });\n        localStorage.setItem(\"authenticatedUser\", JSON.stringify(assertion));\n        alert(\"Authentication successful!\");\n        window.location.href = \"habits.html\";\n    } catch (error) {\n        console.error(\"Authentication failed:\", error);\n        alert(\"Authentication failed. Try again.\");\n    }\n}\ndocument.getElementById(\"registerBiometric\").addEventListener(\"click\", $f9208ba5285f3f38$var$registerBiometric);\ndocument.getElementById(\"signIn\").addEventListener(\"click\", $f9208ba5285f3f38$var$authenticateBiometric);\n\n\n//# sourceMappingURL=index.84f4bc14.js.map\n","\"use strict\";\n\nvar mapping = new Map();\nfunction register(baseUrl, manifest) {\n  for (var i = 0; i < manifest.length - 1; i += 2) {\n    mapping.set(manifest[i], {\n      baseUrl: baseUrl,\n      path: manifest[i + 1]\n    });\n  }\n}\nfunction resolve(id) {\n  var resolved = mapping.get(id);\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n  return new URL(resolved.path, resolved.baseUrl).toString();\n}\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(new __parcel__URL__(\"\").toString(),JSON.parse(\"[\\\"earC1\\\",\\\"index.84f4bc14.js\\\",\\\"b7sw5\\\",\\\"service-worker.57b936f8.js\\\"]\"));","const sw = new URL(\"./service-worker.js\", import.meta.url);\n\nif (\"serviceWorker\" in navigator) {\n  navigator.serviceWorker\n    .register(sw.href, {\n      scope: \"/habit-tracker/\",\n    })\n    .then(() => console.log(\"Service Worker Registered for scope:\", sw.href))\n    .catch((err) => console.error(\"Service Worker Error:\", err));\n}\n\nasync function registerBiometric() {\n  const userEmail = prompt(\"Enter your email for registration:\");\n  if (!userEmail) {\n    alert(\"Email is required for biometric registration.\");\n    return;\n  }\n\n  const publicKey = {\n    challenge: new Uint8Array(32),\n    rp: { name: \"Habit Tracker\" },\n    user: {\n      id: new TextEncoder().encode(userEmail),\n      name: userEmail,\n      displayName: \"User\",\n    },\n    pubKeyCredParams: [{ type: \"public-key\", alg: -7 }],\n    authenticatorSelection: { userVerification: \"required\" },\n    timeout: 60000,\n    attestation: \"direct\",\n  };\n\n  try {\n    const credential = await navigator.credentials.create({ publicKey });\n\n    const idBase64 = btoa(\n      String.fromCharCode(...new Uint8Array(credential.rawId))\n    );\n\n    localStorage.setItem(\n      \"biometricKey\",\n      JSON.stringify({\n        id: idBase64,\n        email: userEmail,\n      })\n    );\n    localStorage.setItem(\"email\", JSON.stringify(userEmail));\n\n    alert(\"Biometric registration successful!\");\n  } catch (error) {\n    console.error(\"Biometric registration failed:\", error);\n    alert(\"Biometric registration failed. Try again.\");\n  }\n}\n\nfunction base64urlToUint8Array(base64url) {\n  const padding = \"=\".repeat((4 - (base64url.length % 4)) % 4);\n  const base64 = (base64url + padding).replace(/-/g, \"+\").replace(/_/g, \"/\");\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n\nasync function authenticateBiometric() {\n  const storedCredentials = JSON.parse(localStorage.getItem(\"biometricKey\"));\n  if (!storedCredentials) {\n    alert(\"No biometric data found. Please register first.\");\n    return;\n  }\n\n  const publicKey = {\n    challenge: new Uint8Array(32),\n    allowCredentials: [\n      {\n        id: base64urlToUint8Array(storedCredentials.id),\n        type: \"public-key\",\n      },\n    ],\n    userVerification: \"required\",\n    timeout: 60000,\n  };\n\n  try {\n    const assertion = await navigator.credentials.get({ publicKey });\n\n    localStorage.setItem(\"authenticatedUser\", JSON.stringify(assertion));\n\n    alert(\"Authentication successful!\");\n    window.location.href = \"habits.html\";\n  } catch (error) {\n    console.error(\"Authentication failed:\", error);\n    alert(\"Authentication failed. Try again.\");\n  }\n}\n\ndocument\n  .getElementById(\"registerBiometric\")\n  .addEventListener(\"click\", registerBiometric);\ndocument\n  .getElementById(\"signIn\")\n  .addEventListener(\"click\", authenticateBiometric);\n","module.exports = new __parcel__URL__(\"service-worker.57b936f8.js\").toString();"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$18c11f3350a906ea$export$6503ec6e8aabbaf","set","v","enumerable","configurable","$18c11f3350a906ea$var$mapping","Map","baseUrl","manifest","i","length","path","URL","url","toString","JSON","parse","$e81386d1662d5268$exports","$f9208ba5285f3f38$var$sw","$f9208ba5285f3f38$var$registerBiometric","userEmail","prompt","alert","publicKey","challenge","Uint8Array","rp","name","user","TextEncoder","encode","displayName","pubKeyCredParams","type","alg","authenticatorSelection","userVerification","timeout","attestation","credential","navigator","credentials","create","idBase64","btoa","String","fromCharCode","rawId","localStorage","setItem","stringify","email","error","console","$f9208ba5285f3f38$var$authenticateBiometric","storedCredentials","getItem","allowCredentials","$f9208ba5285f3f38$var$base64urlToUint8Array","base64url","padding","repeat","base64","replace","rawData","window","atob","outputArray","charCodeAt","assertion","location","href","serviceWorker","scope","then","log","catch","document","getElementById","addEventListener"],"version":3,"file":"index.84f4bc14.js.map"}